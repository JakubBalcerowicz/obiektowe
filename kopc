#include <stdio.h>
#include <stdlib.h>

//Sortowanie przez kopcowanie

int number_of_lines;

int parent(int i){ return i / 2; };
int left(int i){ if (i == 0)return 1; else return 2 * i; };
int right(int i){ if (i == 0)return 2; else return 2 * i + 1; };
void heapify(int t[], int i, int n);
void build_heap(int t[]);
void heapsort(int t[]);
//////////////////////////////////////
int main()

{
	FILE* myfile = fopen("file.txt", "r");
	int ch=  -1;

	do
	{
		ch = fgetc(myfile);
		if (ch == '\n')
			number_of_lines++;
	} while (ch != EOF);


	if (ch != '\n' && number_of_lines != -1)
		number_of_lines++;
	fclose(myfile);
	/////////////////////////////



	FILE *myFile;
	myFile = fopen("file.txt", "r");

	//read file into array
	int t[number_of_lines];
	int i;

	if (myFile == NULL)
	{
		printf("Error Reading File\n");
		exit(0);
	}
	for (i = 0; i < number_of_lines; i++)
	{
		fscanf(myFile, "%d,", &t[i]);

	}
	for (i = 0; i < number_of_lines; i++)
	{
		printf("Number is: %d\n\n", t[i]);
	}


	fclose(myFile);

	heapsort(t);

	int z;
	for (z = 0; z < number_of_lines; z++)
	{
		printf("Number is: %d\n\n", t[z]);
	}



	return 0;
}
///////////////////////////////////////
void heapify(int t[], int i, int n){
	int largest;
	int l = left(i);
	int r = right(i);
	if (l<n && t[l] > t[i])
		largest = l;
	else
		largest = i;

	if (r< n && t[r] > t[largest])
		largest = r;
	if (largest != i){
		int x;
		x = t[i];
		t[i] = t[largest];
		t[largest] = x;
		heapify(t, largest, n);
	}
}
////////////////////////////////////////////////////////////////////////
void build_heap(int t[]){
	int i;
	for (i = number_of_lines / 2; i >= 0; --i) ///???
		heapify(t, i, number_of_lines);
}
/////////////////////////////////////////////////////////////////////////
void heapsort(int t[]){
	build_heap(t);
	int i;
	int n = number_of_lines;
	for (i = number_of_lines - 1; i >= 1; --i)
	{
		int x = t[0];
		t[0] = t[i];
		t[i] = x;

		--n;
		heapify(t, 0, n);
	}
}
/////////////////////////




